A3 one query incomplete 

For each of the queries from no.2 to 15 (except10,11) display content of respective table before
executing query on it and after the execution of query.
1. Insert the data as shown in above tables.
2. Update the lname of staff with staffno. 106 to ‘Shinde’.
3. Delete the branch with postcode 411041.
4. List the employees who have atleast 2 A's in their name.
5. List the clients who pay Rent more than 10000.
6. List the name of staff who have salary greater than average salary of all staff.
7. List the Maximum salary from each branch of the staff members from highest to lowest.
8. Update the street of branchNo 1001 to 'MG'.
9. Find the Clients who are also owners.
10. Find the Owners who are not Clients.
11. Find the Owners who have 'c' as the third alphabet in their name.
12. Delete the owner who has fname as 'AMIT'.
13.Find the type and rooms of properties in Pune.
14.Find the name of staffs who work as salesman or saleswoman.
15.Find the no. of properties which are of type Flat.


mysql> create database a3;
Query OK, 1 row affected (0.05 sec)

mysql> use a3;
Database changed
mysql> CREATE TABLE Branch 
    -> (
    ->     branchNovarchar(300),
    ->     Streetvarchar(300),
    ->     Cityvarchar(300),
    ->     Postcodevarchar(300),
    ->     varchar(300),
    ->     varchar(300),
    ->     varchar(300),
    ->     varchar(300),
    ->     varchar(300),
    ->     varchar(300)
    -> 
[1]+  Stopped                 mysql -u root -p
[v1ack@fedora ~]$ mysql -u root -p
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 9
Server version: 8.0.31 MySQL Community Server - GPL

Copyright (c) 2000, 2022, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> use a3;
Database changed
mysql> CREATE TABLE Branch 
    -> (
    ->     branchNo    varchar(300) primary key not null,
    ->     Streetvarchar(300),
    ->     Cityvarchar(300),
    ->     Postcodevarchar(300),
    ->     varchar(300),
    ->     varchar(300),
    ->     varchar(300),
    ->     varchar(300),
    ->     varchar(300),
    ->     varchar(300)
    -> );
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '(300),
    Cityvarchar(300),
    Postcodevarchar(300),
    varchar(300),
    var' at line 4
mysql> CREATE TABLE tableName 
    -> (
    ->     branchNovarchar(300) primary key not null,
    ->     Streetvarchar(300),
    ->     Cityvarchar(300),
    ->     Postcodevarchar(300),
    -> );
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '(300) primary key not null,
    Streetvarchar(300),
    Cityvarchar(300),
    Po' at line 3
mysql> CREATE TABLE tableName (
    ->     branchNovarchar(300) primary key not null,
    ->     Streetvarchar(300),
    ->     Cityvarchar(300),
    ->     Postcodevarchar(300),
    -> );
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '(300) primary key not null,
    Streetvarchar(300),
    Cityvarchar(300),
    Po' at line 2
mysql> CREATE TABLE Branch (
    -> branchNo varchar(300) primary key not null,
    -> Street varchar(300),
    -> City varchar(300),
    -> Postcode varchar(300),
    -> );
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ')' at line 6
mysql> CREATE TABLE Branch ( branchNo varchar(300) primary key not null, Street varchar(300), City varchar(300), Postcode varchar(300) );
Query OK, 0 rows affected (0.08 sec)

mysql> CREATE TABLE Client (
    -> ^C
mysql> drop table Branch;
Query OK, 0 rows affected (0.04 sec)

mysql> CREATE TABLE Branch 
    -> (
    ->     branch int primary key not null,
    ->     Street varchar(300),
    ->     City varchar(300),
    ->     Postcode varchar(300) );
Query OK, 0 rows affected (0.04 sec)

mysql> INSERT INTO Branch (branch, Street, City , Postcode) VALUES ('1001', 'LK', 'Pune', '411002'), ('1002', 'AB', 'Delhi', '110001'), ('1003', 'DGH', 'Pune', '411056'), ('1004', 'ITN', 'Mumbai', '400065'), ('1005', 'UIK', 'Pune', '411041');
Query OK, 5 rows affected (0.01 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> describe Branch;
+----------+--------------+------+-----+---------+-------+
| Field    | Type         | Null | Key | Default | Extra |
+----------+--------------+------+-----+---------+-------+
| branch   | int          | NO   | PRI | NULL    |       |
| Street   | varchar(300) | YES  |     | NULL    |       |
| City     | varchar(300) | YES  |     | NULL    |       |
| Postcode | varchar(300) | YES  |     | NULL    |       |
+----------+--------------+------+-----+---------+-------+
4 rows in set (0.00 sec)

mysql> select * from Branch;
+--------+--------+--------+----------+
| branch | Street | City   | Postcode |
+--------+--------+--------+----------+
|   1001 | LK     | Pune   | 411002   |
|   1002 | AB     | Delhi  | 110001   |
|   1003 | DGH    | Pune   | 411056   |
|   1004 | ITN    | Mumbai | 400065   |
|   1005 | UIK    | Pune   | 411041   |
+--------+--------+--------+----------+
5 rows in set (0.00 sec)

mysql> CREATE TABLE Client 
    -> (
    ->     CUID int primary key not null,
    ->     fName varchar(300),
    ->     lName varchar(300),
    ->     Rent int );
Query OK, 0 rows affected (0.04 sec)

mysql> INSERT INTO Client (CUID, fName, lName, Rent, , , , , , ) VALUES ('1', 'Aboli', 'Kekre', '12000'), ('2', 'Rahul', 'Sinha', '7000'), ('3', 'Sachin', 'Shah', '20000'), ('4', 'Rahul', 'Jog', '15000'), ('5', 'Reema', 'Shaw', '25000');
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ', , , , , ) VALUES ('1', 'Aboli', 'Kekre', '12000'), ('2', 'Rahul', 'Sinha', '70' at line 1
mysql> INSERT INTO Client (CUID, fName, lName, Rent ) VALUES ('1', 'Aboli', 'Kekre', '12000'), ('2', 'Rahul', 'Sinha', '7000'), ('3', 'Sachin', 'Shah', '20000'), ('4', 'Rahul', 'Jog', '15000'), ('5', 'Reema', 'Shaw', '25000');
Query OK, 5 rows affected (0.01 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> describe Client;
+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| CUID  | int          | NO   | PRI | NULL    |       |
| fName | varchar(300) | YES  |     | NULL    |       |
| lName | varchar(300) | YES  |     | NULL    |       |
| Rent  | int          | YES  |     | NULL    |       |
+-------+--------------+------+-----+---------+-------+
4 rows in set (0.00 sec)

mysql> select * from Client;
+------+--------+-------+-------+
| CUID | fName  | lName | Rent  |
+------+--------+-------+-------+
|    1 | Aboli  | Kekre | 12000 |
|    2 | Rahul  | Sinha |  7000 |
|    3 | Sachin | Shah  | 20000 |
|    4 | Rahul  | Jog   | 15000 |
|    5 | Reema  | Shaw  | 25000 |
+------+--------+-------+-------+
5 rows in set (0.00 sec)

mysql> CREATE TABLE PrivateOwner 
    -> (
    ->     OUID int primary key not null,
    ->     fName varchar(300),
    ->     lName varchar(300),
    ->     Address varchar(300) );
Query OK, 0 rows affected (0.05 sec)

mysql> INSERT INTO PrivateOwner (OUID, fName, lName, Address, , , , , , ) VALUES ('201', 'Sachin', 'Shah', 'Pune'), ('202', 'Dinesh', 'Malhotra', 'Indore'), ('203', 'Prerna', 'Patel', 'Mumbai'), ('204', 'Kirtin', 'Raj', 'Mumbai'), ('205', 'Amit', 'Jog', 'Pune');
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ', , , , , ) VALUES ('201', 'Sachin', 'Shah', 'Pune'), ('202', 'Dinesh', 'Malhotr' at line 1
mysql> INSERT INTO PrivateOwner (OUID, fName, lName, Address) VALUES ('201', 'Sachin', 'Shah', 'Pune'), ('202', 'Dinesh', 'Malhotra', 'Indore'), ('203', 'Prerna', 'Patel', 'Mumbai'), ('204', 'Kirtin', 'Raj', 'Mumbai'), ('205', 'Amit', 'Jog', 'Pune');
Query OK, 5 rows affected (0.01 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> CREATE TABLE PrivateOwner (
    ->     StaffNo int primary key not null,
    ->     Fname varchar(300),
    ->     Lname varchar(300),
    ->     Position varchar(300),
    ->     Sex varchar(300),
    ->     DoB varchar(300),
    ->     Salary varchar(300),
    ->     BranchNo varchar(300)
    -> );
ERROR 1050 (42S01): Table 'PrivateOwner' already exists
mysql> CREATE TABLE Staff (     StaffNo int primary key not null,
Fname varchar(300),     Lname varchar(300),     Position varchar(300),
     Sex varchar(300),     DoB varchar(300),     Salary varchar(300),
    BranchNo varchar(300) );
Query OK, 0 rows affected (0.08 sec)

mysql> INSERT INTO Staff (StaffNo, Fname, Lname, Position, Sex, DoB, Salary, BranchNo ) VALUES ('100', 'Rinku', 'Roy', 'Saleswoman', 'F', '10-03-90', '5000', '1001'), ('101', 'Aditya', 'Shinde', 'Manager', 'M',
 '16-08-84', '50000', '1002'), ('102', 'Raashi', 'Patel', 'Saleswoman'
, 'F', '28-09-84', '10000', '1001'), ('103', 'Dhiren', 'Pol', 'Salesma
n', 'M', '10-03-91', '10000', '1003'), ('104', 'Rekha', 'Shah', 'Manag
er', 'F', '25-06-83', '45000', '1002'), ('105', 'Raja', 'null', 'Salesman', 'M', '14-02-88', '12000', '1003'), ('106', 'Ram', 'Rao', 'Salesm
an', 'M', '11-03-85', '25000', '1004');
Query OK, 7 rows affected (0.01 sec)
Records: 7  Duplicates: 0  Warnings: 0

mysql> describe Staff;
+----------+--------------+------+-----+---------+-------+
| Field    | Type         | Null | Key | Default | Extra |
+----------+--------------+------+-----+---------+-------+
| StaffNo  | int          | NO   | PRI | NULL    |       |
| Fname    | varchar(300) | YES  |     | NULL    |       |
| Lname    | varchar(300) | YES  |     | NULL    |       |
| Position | varchar(300) | YES  |     | NULL    |       |
| Sex      | varchar(300) | YES  |     | NULL    |       |
| DoB      | varchar(300) | YES  |     | NULL    |       |
| Salary   | varchar(300) | YES  |     | NULL    |       |
| BranchNo | varchar(300) | YES  |     | NULL    |       |
+----------+--------------+------+-----+---------+-------+
8 rows in set (0.01 sec)

mysql> select * from Staff
    -> ;
+---------+--------+--------+------------+------+----------+--------+----------+
| StaffNo | Fname  | Lname  | Position   | Sex  | DoB      | Salary | BranchNo |
+---------+--------+--------+------------+------+----------+--------+----------+
|     100 | Rinku  | Roy    | Saleswoman | F    | 10-03-90 | 5000   | 1001     |
|     101 | Aditya | Shinde | Manager    | M    | 16-08-84 | 50000  | 1002     |
|     102 | Raashi | Patel  | Saleswoman | F    | 28-09-84 | 10000  | 1001     |
|     103 | Dhiren | Pol    | Salesman   | M    | 10-03-91 | 10000  | 1003     |
|     104 | Rekha  | Shah   | Manager    | F    | 25-06-83 | 45000  | 1002     |
|     105 | Raja   | null   | Salesman   | M    | 14-02-88 | 12000  | 1003     |
|     106 | Ram    | Rao    | Salesman   | M    | 11-03-85 | 25000  | 1004     |
+---------+--------+--------+------------+------+----------+--------+----------+
7 rows in set (0.00 sec)

mysql> CREATE TABLE PropertyForRent (
    ->     PropNo int primary key not null,
    ->     Street varchar(300),
    ->     Cityvarchar(300),
    ->     Postcode varchar(300),
    ->     Type varchar(300),
    ->     Rooms varchar(300),
    ->     Rent int,
    ->     ownerNo int,
    ->     staffNo int,
    ->     BranchNo int );
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '(300),
    Postcode varchar(300),
    Type varchar(300),
    Rooms varchar(300),' at line 4
mysql> CREATE TABLE PropertyForRent (
    ->     PropNo int primary key not null,
    ->     Street varchar(300),
    ->     City varchar(300),
    ->     Postcode varchar(300),
    ->     Type varchar(300),
    ->     Rooms varchar(300),
    ->     Rent int,
    ->     ownerNo int,
    ->     staffNo int,
    ->     BranchNo int );
Query OK, 0 rows affected (0.08 sec)

mysql> INSERT INTO PropertyForRent (PropNo, Street, City, Postcode, Type, Rooms, Rent, ownerNo, staffNo, BranchNo) VALUES ('1', 'AB', 'Pune', '411041', 'Flat', '2', '15000', '201', '102', '1001'), ('2', 'DH', 'Mumbai', '400003', 'Flat', '3', '75000', '204', '106', '1004'), ('3', 'NM', 'Delhi', '100123', 'Row House', '4', '95000', '202', '104', '1002'), ('4', 'FR', 'Pune', '411028', 'Flat', '3', '25000', '203', '105', '1003');
Query OK, 4 rows affected (0.05 sec)
Records: 4  Duplicates: 0  Warnings: 0

mysql> describe PropertyForRent;
+----------+--------------+------+-----+---------+-------+
| Field    | Type         | Null | Key | Default | Extra |
+----------+--------------+------+-----+---------+-------+
| PropNo   | int          | NO   | PRI | NULL    |       |
| Street   | varchar(300) | YES  |     | NULL    |       |
| City     | varchar(300) | YES  |     | NULL    |       |
| Postcode | varchar(300) | YES  |     | NULL    |       |
| Type     | varchar(300) | YES  |     | NULL    |       |
| Rooms    | varchar(300) | YES  |     | NULL    |       |
| Rent     | int          | YES  |     | NULL    |       |
| ownerNo  | int          | YES  |     | NULL    |       |
| staffNo  | int          | YES  |     | NULL    |       |
| BranchNo | int          | YES  |     | NULL    |       |
+----------+--------------+------+-----+---------+-------+
10 rows in set (0.01 sec)

mysql> select * from PropertyForRent;
+--------+--------+--------+----------+-----------+-------+-------+---------+---------+----------+
| PropNo | Street | City   | Postcode | Type      | Rooms | Rent  | ownerNo | staffNo | BranchNo |
+--------+--------+--------+----------+-----------+-------+-------+---------+---------+----------+
|      1 | AB     | Pune   | 411041   | Flat      | 2     | 15000 |     201 |     102 |     1001 |
|      2 | DH     | Mumbai | 400003   | Flat      | 3     | 75000 |     204 |     106 |     1004 |
|      3 | NM     | Delhi  | 100123   | Row House | 4     | 95000 |     202 |     104 |     1002 |
|      4 | FR     | Pune   | 411028   | Flat      | 3     | 25000 |     203 |     105 |     1003 |
+--------+--------+--------+----------+-----------+-------+-------+---------+---------+----------+
4 rows in set (0.00 sec)

mysql> update Staff
    -> SET Lname = 'Shinde'
    -> WHERE StaffNo = 106;
Query OK, 1 row affected (0.05 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> delete from Branch where Postcode = '411041';
Query OK, 1 row affected (0.01 sec)

mysql> select * from Staff where Fname LIKE '%A%A';
+---------+--------+--------+----------+------+----------+--------+----------+
| StaffNo | Fname  | Lname  | Position | Sex  | DoB      | Salary | BranchNo |
+---------+--------+--------+----------+------+----------+--------+----------+
|     101 | Aditya | Shinde | Manager  | M    | 16-08-84 | 50000  | 1002     |
|     105 | Raja   | null   | Salesman | M    | 14-02-88 | 12000  | 1003     |
+---------+--------+--------+----------+------+----------+--------+----------+
2 rows in set (0.00 sec)

mysql> select * from Client where Rent > 10000;
+------+--------+-------+-------+
| CUID | fName  | lName | Rent  |
+------+--------+-------+-------+
|    1 | Aboli  | Kekre | 12000 |
|    3 | Sachin | Shah  | 20000 |
|    4 | Rahul  | Jog   | 15000 |
|    5 | Reema  | Shaw  | 25000 |
+------+--------+-------+-------+
4 rows in set (0.00 sec)

mysql> select * from Staff 
    -> where Salary >
    -> All(select avg(Salary) from Staff);
+---------+--------+--------+----------+------+----------+--------+----------+
| StaffNo | Fname  | Lname  | Position | Sex  | DoB      | Salary | BranchNo |
+---------+--------+--------+----------+------+----------+--------+----------+
|     101 | Aditya | Shinde | Manager  | M    | 16-08-84 | 50000  | 1002     |
|     104 | Rekha  | Shah   | Manager  | F    | 25-06-83 | 45000  | 1002     |
|     106 | Ram    | Shinde | Salesman | M    | 11-03-85 | 25000  | 1004     |
+---------+--------+--------+----------+------+----------+--------+----------+
3 rows in set (0.00 sec)

mysql> select BranchNo, Fname, Lname, max(Salary)
    -> from Staff
    -> group by BranchNo;
ERROR 1055 (42000): Expression #2 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'a3.Staff.Fname' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by
mysql> select BranchNo, max(Salary) from Staff group by BranchNo;
+----------+-------------+
| BranchNo | max(Salary) |
+----------+-------------+
| 1001     | 5000        |
| 1002     | 50000       |
| 1003     | 12000       |
| 1004     | 25000       |
+----------+-------------+
4 rows in set (0.00 sec)

mysql> select BranchNo, max(Salary) from Staff group by BranchNo order by Salary DES;
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'DES' at line 1
mysql> select BranchNo, max(Salary) from Staff group by BranchNo;
+----------+-------------+
| BranchNo | max(Salary) |
+----------+-------------+
| 1001     | 5000        |
| 1002     | 50000       |
| 1003     | 12000       |
| 1004     | 25000       |
+----------+-------------+
4 rows in set (0.01 sec)

mysql> select BranchNo, max(Salary) from Staff group by BranchNo order by Salary DESC;
ERROR 1055 (42000): Expression #1 of ORDER BY clause is not in GROUP BY clause and contains nonaggregated column 'a3.Staff.Salary' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by
mysql> select BranchNo, max(Salary) from Staff group by BranchNo order by max(Salary) DESC;
+----------+-------------+
| BranchNo | max(Salary) |
+----------+-------------+
| 1002     | 50000       |
| 1001     | 5000        |
| 1004     | 25000       |
| 1003     | 12000       |
+----------+-------------+
4 rows in set (0.00 sec)

mysql> select BranchNo, max(Salary) from Staff group by BranchNo order by max(Salary);
+----------+-------------+
| BranchNo | max(Salary) |
+----------+-------------+
| 1003     | 12000       |
| 1004     | 25000       |
| 1001     | 5000        |
| 1002     | 50000       |
+----------+-------------+
4 rows in set (0.00 sec)

mysql> select BranchNo, max(Salary) from Staff group by BranchNo order by BranchNo, max(Salary) DESC;
+----------+-------------+
| BranchNo | max(Salary) |
+----------+-------------+
| 1001     | 5000        |
| 1002     | 50000       |
| 1003     | 12000       |
| 1004     | 25000       |
+----------+-------------+
4 rows in set (0.00 sec)

mysql> select BranchNo, max(Salary) from Staff order by max(Salary) group by BranchNo;
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'group by BranchNo' at line 1
mysql> select BranchNo, max(Salary) from Staff group by BranchNo order by Salary DESC;
ERROR 1055 (42000): Expression #1 of ORDER BY clause is not in GROUP BY clause and contains nonaggregated column 'a3.Staff.Salary' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by
mysql> update Branach
    -> set Street = 'MG'
    -> where branchNo = 1001;
ERROR 1146 (42S02): Table 'a3.Branach' doesn't exist
mysql> update Branch set Street = 'MG' where branchNo = 1001;
ERROR 1054 (42S22): Unknown column 'branchNo' in 'where clause'
mysql> describe Branch;
+----------+--------------+------+-----+---------+-------+
| Field    | Type         | Null | Key | Default | Extra |
+----------+--------------+------+-----+---------+-------+
| branch   | int          | NO   | PRI | NULL    |       |
| Street   | varchar(300) | YES  |     | NULL    |       |
| City     | varchar(300) | YES  |     | NULL    |       |
| Postcode | varchar(300) | YES  |     | NULL    |       |
+----------+--------------+------+-----+---------+-------+
4 rows in set (0.00 sec)

mysql> update Branch set Street = 'MG' where branch = 1001;
Query OK, 1 row affected (0.04 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select Client.fName as "fName", Client.lName as "lName"
    -> from Client, PrivateOwner
    -> where Client.fName = PrivateOwner.fName and Client.lName = PrivateOwner.lName;
+--------+-------+
| fName  | lName |
+--------+-------+
| Sachin | Shah  |
+--------+-------+
1 row in set (0.00 sec)

mysql> select PrivateOwner.fName as "fName", PrivateOwner.lName as "lN
ame" from Client, PrivateOwner where Client.fName != PrivateOwner.fNam
e and Client.lName != PrivateOwner.lName;
+--------+----------+
| fName  | lName    |
+--------+----------+
| Sachin | Shah     |
| Sachin | Shah     |
| Sachin | Shah     |
| Sachin | Shah     |
| Dinesh | Malhotra |
| Dinesh | Malhotra |
| Dinesh | Malhotra |
| Dinesh | Malhotra |
| Dinesh | Malhotra |
| Prerna | Patel    |
| Prerna | Patel    |
| Prerna | Patel    |
| Prerna | Patel    |
| Prerna | Patel    |
| Kirtin | Raj      |
| Kirtin | Raj      |
| Kirtin | Raj      |
| Kirtin | Raj      |
| Kirtin | Raj      |
| Amit   | Jog      |
| Amit   | Jog      |
| Amit   | Jog      |
| Amit   | Jog      |
+--------+----------+
23 rows in set (0.00 sec)

mysql> select unique PrivateOwner.fName as "fName", PrivateOwner.lName
 as "lName" from Client, PrivateOwner where Client.fName != PrivateOwner.fName and Client.lName != PrivateOwner.lName;
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'unique PrivateOwner.fName as "fName", PrivateOwner.lName as "lName" from Client,' at line 1
mysql> select distinct PrivateOwner.fName as "fName", PrivateOwner.lNa
me as "lName" from Client, PrivateOwner where Client.fName != PrivateOwner.fName and Client.lName != PrivateOwner.lName;
+--------+----------+
| fName  | lName    |
+--------+----------+
| Sachin | Shah     |
| Dinesh | Malhotra |
| Prerna | Patel    |
| Kirtin | Raj      |
| Amit   | Jog      |
+--------+----------+
5 rows in set (0.00 sec)

mysql> select PrivateOwner.fName, PrivateOwner.lName
    -> from PrivateOwner 
    -> where PrivateOwner.fName not in (select Client.fName, Client.lName from Client, PrivateOwner where Client.fName = PrivateOwner.fName);
ERROR 1241 (21000): Operand should contain 1 column(s)
mysql> select PrivateOwner.fName, PrivateOwner.lName from PrivateOwner where PrivateOwner.fName not in (select Client.fName from Client, PrivateOwner where Client.fName = PrivateOwner.fName);
+--------+----------+
| fName  | lName    |
+--------+----------+
| Dinesh | Malhotra |
| Prerna | Patel    |
| Kirtin | Raj      |
| Amit   | Jog      |
+--------+----------+
4 rows in set (0.00 sec)

mysql> select fName, lName from PrivateOwner
    -> where fName like '__c%';
+--------+-------+
| fName  | lName |
+--------+-------+
| Sachin | Shah  |
+--------+-------+
1 row in set (0.01 sec)

mysql> delete from PrivateOwner where fname='Amit';
Query OK, 1 row affected (0.01 sec)

mysql> select * from PrivateOwner;
+------+--------+----------+---------+
| OUID | fName  | lName    | Address |
+------+--------+----------+---------+
|  201 | Sachin | Shah     | Pune    |
|  202 | Dinesh | Malhotra | Indore  |
|  203 | Prerna | Patel    | Mumbai  |
|  204 | Kirtin | Raj      | Mumbai  |
+------+--------+----------+---------+
4 rows in set (0.00 sec)

mysql> select Type, Rooms from PropertyForRent where City='Pune';
+------+-------+
| Type | Rooms |
+------+-------+
| Flat | 2     |
| Flat | 3     |
+------+-------+
2 rows in set (0.00 sec)

mysql> select Lname, Fname from Staff where Position = 'Saleswoman' or Position = 'Salesman';
+--------+--------+
| Lname  | Fname  |
+--------+--------+
| Roy    | Rinku  |
| Patel  | Raashi |
| Pol    | Dhiren |
| null   | Raja   |
| Shinde | Ram    |
+--------+--------+
5 rows in set (0.00 sec)

mysql> select count(*) from PropertyForRent where Type='Flat';
+----------+
| count(*) |
+----------+
|        3 |
+----------+
1 row in set (0.00 sec)
